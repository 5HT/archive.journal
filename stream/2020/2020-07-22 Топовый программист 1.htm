<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2020-07-22</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2020-07-22</a>
</nav>
<main>
    <section>
    <h3>Топовый программист. Выпуск 1.</h3>
        <p align=right>
FROM: Максим Сохацкий<br/>
TO: <a href="https://patreon.com/5HT">Patreon Subscribers</a>
</p>

<h4>Топовый программист</h4>

<p>Если мои подписчики на patreon/5HT и twitter/5HT просят о какой-то масштабной контрибуции, то это монографию на тему «как стать топовым программистом». Хотя такая формулировка инфантильна, она достаточно хорошо отображает суть вопрошаемого: детальное рассмотрение профессии программиста, стратегию изучения предмета исходя из личного опыта, разбавленное аутентичной философией.</p>

<p>Данный труд, который тяжело вместить в twitter формате, если и будет иметь продолжение, то тоже на страницах этого рабочего журнала в виде серии заметок, где же им еще быть!</p>

<h4>Выражение уважения</h4>

<p>Перед тем как начать повествование о профессии программиста прежде всего хочется выразить уважения предмету изучения и практики программирования, а именно формальным математическим вычислительным построениям, в которых возможно программирование в принципе. В последние годы стало понятно, что пространство этих построений настолько глубоко, что может поглотить не только все дискретные программы всех формальных грамматик, но и континуальную математику, в которой работа с пространством идет на другом, более фундаментальном уровне. Поэтому без лишнего преувеличения можно сказать, что само пространство рождает языковую группу языков, которые представляют собой первоначальную матрицу всех без исключения языков программирования.</p>

<p>Принцип глубокого уважения к предмету, который начинающий мастер должен реализовать является одним из секретных ключей восточной философии. Раз программирование рождается из пространства феноменологических построений ведущих к абстрактной классификации пространств и логик с ними связанных, то удержание в фокусе цели изучения пространства и программирования как практического человеческого процесса с этим связанного является главной задачей на пути изучения. Поэтому, без недооценивания и лишнего преувеличения можно сказать, что простирание или поклонение, как проявление уважение к самому пространству, как объекту изучения, выглядит для меня логичным. Я простираюсь перед пространством.</p>

<h4>Проверка мотивации</h4>

<p>Важной характеристикой, которая хотите верьте, а хотите нет, влияет на процесс изучения искусства программирования является чистота мотивации. Если рассмотреть граничный пример, то он будет выглядеть так: вашей мотивацией является увеличение своих навыков программиста для достижение материальных благ и увеличение конкурентоспособности на рынке труда. Полная чушь, такая мотивация влияет на критерии выбора объектов изучения и это может завести вас в ситуацию, когда вам 50 лет и вы пишете на Core Java для какого-то швейцарского банка. Явно люди, которые просили этот текст, не ожидают у меня чего-то подобного. </p>

<p>Свои иллюзии насчет легкости этого пути можете сразу отбросить. Этот путь по-самурайски сложен и на нем сходили с ума не только выпускники прикладной математики, неымало людей перегорело на предприятиях от переизбытка и неконтролируемости информации. Поэтому 10 лет затвора с постоянным выделенным каналом в интернет на полном внешнем обеспечении — идеальный ресурс, который я рекомендовал бы выделить для успешной подготовки на мастера программирования. Откуда такой дикий расход с принятой методикой обучения придется раскрыть в следующих условных выпусках, так как должна оставаться интрига. Вообще 10 лет совершенно нормальный временной интервал для обучения профессии врача, почему программист должен обучаться в более сжатые сроки? Ведь количество языков, которыми оперирует топовый программист может доходить до тысяч, и это в практике.  Это не просто латынь, эсперанто и романо-германская группа. Половину из этого времени можно проводить в реальных проектах, типа интернатуре, но языков и материала так много, что для топового программиста 10 лет можно выделить только на теорию. </p>

<p>Да, можно и в 50 лет устроится на галеру «цифровым сантехником», но это тоже никак не попадает под курс топового программиста, который должен покрывать от создания процессоров, ассемблеров, компиляторов, операционных систем, баз данных, сетевых протоколов, сервисов, шин и приложений до теоретико-типовых верификаторов математических моделей и теорем, сертифицированных компиляторов, систем доказательства теорем. Программирование, как и математика — удел молодых!</p>

<p>Без правильной мотивации предъявлять претензии о зря потраченных 10 годах безрезультатно на курс Сохацкого категорически запрещается! Как проверять чистоту мотивации и насколько точны могут быть рекомендации? Могу лишь сказать, что вы должны быть предельно честны с самим собой, ведь программирование — это сложный изнурительный ментальный процесс, а мышление — это высшая форма управления организмом, поэтому сбои в его работе могут привести к фатальным последствиям. Если вы кроме программирования ничего не умеет, то неплохо было бы разработать стратегию отхода: минимальная техника управления дыханием, легкий спорт без фанатизма, немного йоги, возможно активные виды спорта. Если вы считаете, что в целом вы психически устойчивый человек, то приготовьтесь к сюрпризам на пути к постижению загадок пространства без внутренней чистоты намерений.</p>

<p>Моей личной мантрой, с которой я изучаю программирование — это посвящение результатов своей работы людям и всем существам, не навредив никому без исключения. Вообще изучения программирования мало кому может помешать и может иметь форму глубокого затворничества святого монаха. Хотя есть и исключения, программисты в основном не жестокие существа и именно эта излишняя энергия агрессии, развернутая в позитивном направлении интроспекции, является двигателем аутического постижения тайн профессии программиста!</p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2020</footer>
</body>
</html>
