<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2021-08-09</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2021-08-09</a>
</nav>
<main>
    <section>
        <h3>TWAIN 2: Д'Артаньян 20 лет спустя</h3>

        <p>TLDR; Сохацкий опять за неделю ебанул нетленочку.</p>

        <p>Как вы знаете в 2001 году первоей моей работой после КПИ,
           была корпорация International Land Systems, Inc., где мы писали
           системы документооборота и управления бизнес-процессами для автоматизации
           документооборота в кадастровом деле для таких стран как Ямайка, Египет, Азербайджан.
           Также вы можете знать со страниц этого блога, что делалось это на самописном LISP
           для (тогда еще) .NET Framework 1.0.</p>

        <p>И вот, спустя 20 лет, оказывается ситуация на рынке совсем не измелась.
           Сканеры по-прежнему не умеют сканировать в браузеры, поэтому такие производители
           как LeadTools (библиотеку которых я использовал 20 лет назад) или
           Dynamsoft (которую мы пытались использовать сейчас)
           предлагают свои решения для обеспечения доставки отсканированых изображений в контекст
           веб-сервера посредством промежуточного локального веб-сервера имеющего доступ
           к физическому устройсву. И решения эти нада сказать слишком дорогие
           для <a href="https://dir.gov.ua/projects/sev-ovv/perel-k-protestovanikh-sed">производителей
           СЭД на рынке Украины</a>, где выставлена более-менее унифицированая цена в $1K raw версия за год,
           а стоимость решений для сканирования начинается только в пол центы от этого.
           Поэтому все они должны использовать свои решения для сканирования.</p>

        <figure><img src="https://github.com/erpuno/scan/raw/master/Resources/screenshot.png"></figure>

        <p>Наш продукт "МІА: Документообіг" состоит из трех суб-продуктов: 1) "МІА: CRM" (ядро CRM системы,
           на базе которого построена СЭД), 2) "МІА: Офіс" -- система редактирования офисных документов Word, Excel, PowerPoint для браузера,
           3) "МІА: Сканування" -- система захвата изображений из сканера в браузер, а также трей приложении для нотификаций с бекендов,
           именно о нем пойдет речь в этой статье.</p>

        <h4>Формирование требований и компоненты архитектуры</h4>

        <p>Предварительные исследования показали, что все заказчики Украины на рынке СЭД хотят трей приложение
           для трех систем (Mac, Linux, Windows), которое бы одновременно: 1) выступало и локальаным
           сервером для браузера, который имеет доступ к цифровым ключам, сканерам, и другим устройствам,
           и обслуживает запросы со страницы приложения "МІА: Документообіг" и 2) было MQTT клиентом и
           конектилось в брокеру сообщений и подписывалось для получения различных оповещений
           реального времени по заданным каналам подписок. Для реализации первой части нами был
           написан весной F# WebSocket сервер, лайки которому ставил Филип Картер, когда был еще програмным
           менеджером F# в Microsoft. Вторая часть просто использует NuGet библиотеку System.Net.Mqtt и
           конектится к брокеру EMQ X, который является опциональной частью поставки "МІА: Документообіг".</p>

        <figure><img src="https://github.com/erpuno/scan/raw/master/Resources/messaging.png"></figure>

        <p>Так же основным приоритетным требованием кроме кросслпатформенности является получение сразу PDF документов,
           поэтому в поставку была включена достаточно небольшая библиотека PDFSharp (700KB).</p>

        <p>* Kodak Alaris C# TWAIN SDK (256KB)<br>
           * Empira C# PDF SDK (700KB)<br>
           * INFOTECH F# WebSocket server (64KB)<br>
           * Xamarin C# MQTT client (160KB)</p>

        <p>Что касается самого главного, TWAIN SDK, то тут сразу есть два варианта:
           писать все самому на С++ (дорого) или писать все самому на .NET (дешево).
           Сейчас официальный TWAIN SDK который лежит у них на Github написано компанией KODAK Alaris,
           поэтому я взял их примеры и начал работать. Структура их примеров содержит три проекта,
           в каждом из которых сорежится имплементация одного из режимов работы сканера:
           1) Memory Transfer;
           2) Native Transfer;
           3) File Transfer. Но ни один из этих проектов не содержит код который
           можно использовать прямо, однако там достаточно того, чтобы понять что происходит.</p>

        <p>Я сразу начал с Memory режима и сразу получил стабильные артефакты
           при неопределнных обстоятельствах. Потратив день на эту проблему, я быстро переключился
           на Native режим и еще за один деть полностью переписал сканирование на Native режим,
           добавив дуплексное сканирование и автоподачу с фидера (автосканирование). Получив прототип
           стабильного сканирования я создал прослойку из хелперов для достаточно наивного
           студенческого Kodak Alaris SDK. Я пытался получить Single File Executable,
           но ни ILMerge ни современные средства не позволяют это сделать для ассемблей
           скомпилированых F# компилятором (содержащих FSharp.Core). Зато я добился того, что для того, чтобы
           собрать приложение не нужно вообще ничего кроме Windows:</P>

        <figure><code>> C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe mia-agent.csproj</code></figure>

        <p>Таким образом, мы гарантируем, что в наших экзешниках нет никаких "петь" или
           блокчейновских ренсомварей, что особенно критично для наших заказчиков. Поэтому
           любой недоверчивый пользователь может собрать "МІА: Сканування" самостоятельно не
           используя вообще никаких средств разработки!</p>

        <p>Благодаря тому, что мы выставили целевую платформу как .NET Framework 4.6 наш
           продукт "МІА: Сканування" может запускать на любом виндовсе который младше 10 мая 2015 года,
           и при этом не требует установни никаких зависимостей (ни VC рантаймов ни .NET фреймворков)!
           Реально эта фича может сделать этот продукт народным.</p>

        <h4>TWAIN протокол</h4>

        <p>Теперь пару слов для тех, что будет программировать ядро сканирования. Ядро сканирования
           состоит из функции ScanCallbackNative, которая будучи вызвана захватывет поток ОС пока полностью
           не отсканирует сесиию. Если вы выставили AUTOSCAN капабилити перед сканированием, то это значит,
           что вы после каждого изображения должны сами сново себя вызывать для продолжения сканирования
           пока количество страниц в фидере будет возвращаться -1. Как только оно станет 0 &mdash; это значит,
           что это последняя страница сканирования. Запомнив первую страницу которая повернула
           колесо сканирования мы таким образом получаем диапазон страниц, набор изображений которые
           нам необходимо склеить для формирования многостраничного PDF или TIFF файла.<p>

        <p>Важной частью протокола является функция Rollback которая делает режимный спуск с
           максимального (7) до минимального режима (2). Логика этой работы описана на странице 3-27
           TWAIN спецификации 2.4 от марта 2017.</p>

        <p>Библиотека INFITECH TWAINI организована таким образом, что если ее правильно грепнуть
           то вы получите минимальный имплементированный набор для сканирования с ремарками из какого
           режима в какой функция переводит контекст сканера:</p>

        <figure><code>$ cat TWAINI.cs | grep TWAIN:
        // TWAIN: 7 -> 2: Rollback: Page 3-27 of 2017-03-TWAIN-SPEC-2.4
        // TWAIN: 4 -> 4: NativeTransfer: CONTROL/CAPABILITY/SET
        // TWAIN: 4 -> 4: AutoFeed: CONTROL/CAPABILITY/SET
        // TWAIN: 4 -> 4: AutoScan: CONTROL/CAPABILITY/SET
        // TWAIN: 4 -> 4: EnableDuplex: CONTROL/CAPABILITY/SET
        // TWAIN: 4 -> 4: ProgressDriverUI: CONTROL/CAPABILITY/SET
        // TWAIN: 2 -> 3: OpenManager: CONTROL/PARENT/OPENDSM
        // TWAIN: 2 -> 2: GetDefault: CONTROL/IDENTITY/GETDEFAULT
        // TWAIN: 3 -> 3: GetDataSources: CONTROL/IDENTITY/GETFIRST,GETNEXT
        // TWAIN: 3 -> 4: OpenScanner: CONTROL/IDENTITY/OPENDS
        // TWAIN: 6 -> 6: StopFeeder: CONTROL/PENDINGXFERS/STOPFEEDER</code></figure>

        <p>Если вы хотите реально более менее детально изучить протокол то вам конечно же нужно
           выучить наизусть тест сюит набор для прохождения TWAIN сертификации, а если
           вы (как я) немного туповат и с СДВГ, то вам лучше воспользоваться трейсером,
           который покажет вам все фунции и их параметры. Тут нужно сказать что TWAIN
           сканеры программируются и использованием CSV протокола. Я лично без шуток
           считаю это лучшим протоколом для энтрепрайза. Спасибо TWAIN, что не JSON!</p>

        <figure><img src="img/TWAIN-1.PNG"></figure>

        <h4>Windows Forms</h4>

        <p>Как вы знаете для .NET можно делать приложения без XAML (дешево), когда его не было были просто Windows Forms.
           Потом, начиная с Vista появился WPF и XAML приложения (дорого),
           которые до сих пор являются главным способ построений приложений. К счатью политика Microsoft смягчилась
           и в Магазин теперь будут пускать и старые дедовские Win32 приложения в том числе и Windows Forms.</p>

        <p>Приложение состоит из трех форм: FormScan (главная форма сканирования с отображением страниц сканирования),
           FormSetup (настройки прфилей сканирования), FormSelect (выбор источника сканирования). Форма FormScan сделана
           главной формой которая использует активный SystemTrayIcon из которого берется иконка в нотификации.
           А вторая трей иконка используется как NotifyIcon для динамического рендеринча числа непрочитанных
           сообщений в инбоксе пользователя. Потому что если наоброт то в нотификация будут сыпаться иконки
           с цифрами, хотелось бы этого избежать.</p>

        <p>Форма FormSetup управляет настройками сканера. Сканеры устроены таким обрзом что предлагают вам всегда свое
           окно которое не только позволяет вам настроить как вы будете счас сканировать но и получить сериализированный
           слепок этих настроек с гарантированным отсуствием семантики (не пытайтесь это расшировать). Таким образом
           вы можете дергать окно сканирования и сохранять настойки сканирования в профили пользователя (обычные файлы).</p>

        <p>Как правило производители система сканирования поверх этого делают еще свой фирменный диалог, который редактирует следующие настройки:
           1) Цвет; 2) Автоподача; 3) Разрешение; 4) Белая область; 5) Авто-корректировка текста; 6) Авто-доворот.
           Вы можете либо выставлять настройки сохраненные после диалога сканера, либо свои настройки где вы все контролируете,
           либо выставлять сначала настройки сканера а поверх свои. Обычно это три классические кейса.
           Некоторые функции поддерживают сканеры, а некоторые возможно нужно делать самому с использование графических библиотек,
           всегда нужен баланс денег и времени, не пытайтесь сделать из системы сканирования Фотошоп, лучше купите LeadTools.
           В реальности 300 DPI за глаза хватает, главное, чтобы это смог распарсать синьер-человек в очках.</p>

        <h4>Доступ к Веб-серверу</h4>

        <p></p>

        <figure><code>> ws = new WebSocket("ws://127.0.0.1:50220")
> ws.onmessage = function (evt) {
    // тут вы получаете изображения
    console.log(evt.data);
  }
> ws.send('SCAN,DS-530,AUTOSCAN+AUTOFEED')</code></figure>

        <br/>
        <hr/>
        <br/>

     <p>— <a href="https://github.com/erpuno/scan">SCAN</a> — Windows Tray Agent "МІА: Сканування", Companion Application of "МІА: Документообіг".</p>

    </section>
</main>
<footer><img height=64 src="https://openmoji.org/data/color/svg/E329.svg"/></footer>
</body>
</html>
